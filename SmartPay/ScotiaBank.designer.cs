#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartPay
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Scotia Bank")]
	public partial class ScotiaBankDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttransaction_history(transaction_history instance);
    partial void Updatetransaction_history(transaction_history instance);
    partial void Deletetransaction_history(transaction_history instance);
    partial void Inserttransaction_type(transaction_type instance);
    partial void Updatetransaction_type(transaction_type instance);
    partial void Deletetransaction_type(transaction_type instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    partial void InsertBranchCustomer(BranchCustomer instance);
    partial void UpdateBranchCustomer(BranchCustomer instance);
    partial void DeleteBranchCustomer(BranchCustomer instance);
    partial void InsertAccounts(Accounts instance);
    partial void UpdateAccounts(Accounts instance);
    partial void DeleteAccounts(Accounts instance);
    partial void InsertAccount_type(Account_type instance);
    partial void UpdateAccount_type(Account_type instance);
    partial void DeleteAccount_type(Account_type instance);
    partial void InsertAccountCustomer(AccountCustomer instance);
    partial void UpdateAccountCustomer(AccountCustomer instance);
    partial void DeleteAccountCustomer(AccountCustomer instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    #endregion
		
		public ScotiaBankDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Scotia_BankConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ScotiaBankDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScotiaBankDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScotiaBankDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ScotiaBankDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<transaction_history> transaction_histories
		{
			get
			{
				return this.GetTable<transaction_history>();
			}
		}
		
		public System.Data.Linq.Table<transaction_type> transaction_types
		{
			get
			{
				return this.GetTable<transaction_type>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
		
		public System.Data.Linq.Table<BranchCustomer> BranchCustomers
		{
			get
			{
				return this.GetTable<BranchCustomer>();
			}
		}
		
		public System.Data.Linq.Table<Accounts> Accounts
		{
			get
			{
				return this.GetTable<Accounts>();
			}
		}
		
		public System.Data.Linq.Table<Account_type> Account_types
		{
			get
			{
				return this.GetTable<Account_type>();
			}
		}
		
		public System.Data.Linq.Table<AccountCustomer> AccountCustomers
		{
			get
			{
				return this.GetTable<AccountCustomer>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Generate_Bill")]
		public int Generate_Bill([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cust_ID", DbType="Int")] System.Nullable<int> cust_ID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cust_name", DbType="NVarChar(50)")] string cust_name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Statement_date", DbType="DateTime")] System.Nullable<System.DateTime> statement_date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Due_date", DbType="DateTime")] System.Nullable<System.DateTime> due_date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Bill_amount", DbType="Decimal(18,0)")] System.Nullable<decimal> bill_amount)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cust_ID, cust_name, statement_date, due_date, bill_amount);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Make_Payment")]
		public int Make_Payment([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> customerid, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> acct_number, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,0)")] System.Nullable<decimal> payment_amt, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Decimal(18,0)")] System.Nullable<decimal> acct_balance, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="DateTime")] System.Nullable<System.DateTime> payment_time, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NChar(5)")] string transaction_type)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), customerid, acct_number, payment_amt, acct_balance, payment_time, transaction_type);
			return ((int)(result.ReturnValue));
		}

        public static implicit operator ScotiaBankDataContext(NCBJDataContext v)
        {
            throw new NotImplementedException();
        }
    }
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.transaction_history")]
	public partial class transaction_history : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _trans_Id;
		
		private int _acct_number;
		
		private string _trans_desc;
		
		private decimal _trans_amt;
		
		private System.DateTime _date_time;
		
		private string _transaction_type_transtype_Id;
		
		private EntityRef<transaction_type> _transaction_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontrans_IdChanging(int value);
    partial void Ontrans_IdChanged();
    partial void Onacct_numberChanging(int value);
    partial void Onacct_numberChanged();
    partial void Ontrans_descChanging(string value);
    partial void Ontrans_descChanged();
    partial void Ontrans_amtChanging(decimal value);
    partial void Ontrans_amtChanged();
    partial void Ondate_timeChanging(System.DateTime value);
    partial void Ondate_timeChanged();
    partial void Ontransaction_type_transtype_IdChanging(string value);
    partial void Ontransaction_type_transtype_IdChanged();
    #endregion
		
		public transaction_history()
		{
			this._transaction_type = default(EntityRef<transaction_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trans_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int trans_Id
		{
			get
			{
				return this._trans_Id;
			}
			set
			{
				if ((this._trans_Id != value))
				{
					this.Ontrans_IdChanging(value);
					this.SendPropertyChanging();
					this._trans_Id = value;
					this.SendPropertyChanged("trans_Id");
					this.Ontrans_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acct_number", DbType="Int NOT NULL")]
		public int acct_number
		{
			get
			{
				return this._acct_number;
			}
			set
			{
				if ((this._acct_number != value))
				{
					this.Onacct_numberChanging(value);
					this.SendPropertyChanging();
					this._acct_number = value;
					this.SendPropertyChanged("acct_number");
					this.Onacct_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trans_desc", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string trans_desc
		{
			get
			{
				return this._trans_desc;
			}
			set
			{
				if ((this._trans_desc != value))
				{
					this.Ontrans_descChanging(value);
					this.SendPropertyChanging();
					this._trans_desc = value;
					this.SendPropertyChanged("trans_desc");
					this.Ontrans_descChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trans_amt", DbType="Decimal(18,0) NOT NULL")]
		public decimal trans_amt
		{
			get
			{
				return this._trans_amt;
			}
			set
			{
				if ((this._trans_amt != value))
				{
					this.Ontrans_amtChanging(value);
					this.SendPropertyChanging();
					this._trans_amt = value;
					this.SendPropertyChanged("trans_amt");
					this.Ontrans_amtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date_time", DbType="DateTime NOT NULL")]
		public System.DateTime date_time
		{
			get
			{
				return this._date_time;
			}
			set
			{
				if ((this._date_time != value))
				{
					this.Ondate_timeChanging(value);
					this.SendPropertyChanging();
					this._date_time = value;
					this.SendPropertyChanged("date_time");
					this.Ondate_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transaction_type_transtype_Id", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string transaction_type_transtype_Id
		{
			get
			{
				return this._transaction_type_transtype_Id;
			}
			set
			{
				if ((this._transaction_type_transtype_Id != value))
				{
					if (this._transaction_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontransaction_type_transtype_IdChanging(value);
					this.SendPropertyChanging();
					this._transaction_type_transtype_Id = value;
					this.SendPropertyChanged("transaction_type_transtype_Id");
					this.Ontransaction_type_transtype_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="transaction_type_transaction_history", Storage="_transaction_type", ThisKey="transaction_type_transtype_Id", OtherKey="transtype_Id", IsForeignKey=true)]
		public transaction_type transaction_type
		{
			get
			{
				return this._transaction_type.Entity;
			}
			set
			{
				transaction_type previousValue = this._transaction_type.Entity;
				if (((previousValue != value) 
							|| (this._transaction_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._transaction_type.Entity = null;
						previousValue.transaction_histories.Remove(this);
					}
					this._transaction_type.Entity = value;
					if ((value != null))
					{
						value.transaction_histories.Add(this);
						this._transaction_type_transtype_Id = value.transtype_Id;
					}
					else
					{
						this._transaction_type_transtype_Id = default(string);
					}
					this.SendPropertyChanged("transaction_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.transaction_type")]
	public partial class transaction_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _transtype_Id;
		
		private string _transtype_desc;
		
		private EntitySet<transaction_history> _transaction_histories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontranstype_IdChanging(string value);
    partial void Ontranstype_IdChanged();
    partial void Ontranstype_descChanging(string value);
    partial void Ontranstype_descChanged();
    #endregion
		
		public transaction_type()
		{
			this._transaction_histories = new EntitySet<transaction_history>(new Action<transaction_history>(this.attach_transaction_histories), new Action<transaction_history>(this.detach_transaction_histories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transtype_Id", DbType="NChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string transtype_Id
		{
			get
			{
				return this._transtype_Id;
			}
			set
			{
				if ((this._transtype_Id != value))
				{
					this.Ontranstype_IdChanging(value);
					this.SendPropertyChanging();
					this._transtype_Id = value;
					this.SendPropertyChanged("transtype_Id");
					this.Ontranstype_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_transtype_desc", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string transtype_desc
		{
			get
			{
				return this._transtype_desc;
			}
			set
			{
				if ((this._transtype_desc != value))
				{
					this.Ontranstype_descChanging(value);
					this.SendPropertyChanging();
					this._transtype_desc = value;
					this.SendPropertyChanged("transtype_desc");
					this.Ontranstype_descChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="transaction_type_transaction_history", Storage="_transaction_histories", ThisKey="transtype_Id", OtherKey="transaction_type_transtype_Id")]
		public EntitySet<transaction_history> transaction_histories
		{
			get
			{
				return this._transaction_histories;
			}
			set
			{
				this._transaction_histories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_transaction_histories(transaction_history entity)
		{
			this.SendPropertyChanging();
			entity.transaction_type = this;
		}
		
		private void detach_transaction_histories(transaction_history entity)
		{
			this.SendPropertyChanging();
			entity.transaction_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Cust_Id;
		
		private string _branch_code;
		
		private string _cust_name;
		
		private string _cust_address;
		
		private string _gender;
		
		private EntitySet<BranchCustomer> _BranchCustomers;
		
		private EntitySet<AccountCustomer> _AccountCustomers;
		
		private EntitySet<Bill> _Bills;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCust_IdChanging(int value);
    partial void OnCust_IdChanged();
    partial void Onbranch_codeChanging(string value);
    partial void Onbranch_codeChanged();
    partial void Oncust_nameChanging(string value);
    partial void Oncust_nameChanged();
    partial void Oncust_addressChanging(string value);
    partial void Oncust_addressChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    #endregion
		
		public Customer()
		{
			this._BranchCustomers = new EntitySet<BranchCustomer>(new Action<BranchCustomer>(this.attach_BranchCustomers), new Action<BranchCustomer>(this.detach_BranchCustomers));
			this._AccountCustomers = new EntitySet<AccountCustomer>(new Action<AccountCustomer>(this.attach_AccountCustomers), new Action<AccountCustomer>(this.detach_AccountCustomers));
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Cust_Id
		{
			get
			{
				return this._Cust_Id;
			}
			set
			{
				if ((this._Cust_Id != value))
				{
					this.OnCust_IdChanging(value);
					this.SendPropertyChanging();
					this._Cust_Id = value;
					this.SendPropertyChanged("Cust_Id");
					this.OnCust_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_branch_code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string branch_code
		{
			get
			{
				return this._branch_code;
			}
			set
			{
				if ((this._branch_code != value))
				{
					this.Onbranch_codeChanging(value);
					this.SendPropertyChanging();
					this._branch_code = value;
					this.SendPropertyChanged("branch_code");
					this.Onbranch_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string cust_name
		{
			get
			{
				return this._cust_name;
			}
			set
			{
				if ((this._cust_name != value))
				{
					this.Oncust_nameChanging(value);
					this.SendPropertyChanging();
					this._cust_name = value;
					this.SendPropertyChanged("cust_name");
					this.Oncust_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string cust_address
		{
			get
			{
				return this._cust_address;
			}
			set
			{
				if ((this._cust_address != value))
				{
					this.Oncust_addressChanging(value);
					this.SendPropertyChanging();
					this._cust_address = value;
					this.SendPropertyChanged("cust_address");
					this.Oncust_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_BranchCustomer", Storage="_BranchCustomers", ThisKey="Cust_Id", OtherKey="Customers_Cust_Id")]
		public EntitySet<BranchCustomer> BranchCustomers
		{
			get
			{
				return this._BranchCustomers;
			}
			set
			{
				this._BranchCustomers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountCustomer", Storage="_AccountCustomers", ThisKey="Cust_Id", OtherKey="Customers_Cust_Id")]
		public EntitySet<AccountCustomer> AccountCustomers
		{
			get
			{
				return this._AccountCustomers;
			}
			set
			{
				this._AccountCustomers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Bill", Storage="_Bills", ThisKey="Cust_Id", OtherKey="Customer_Cust_Id")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BranchCustomers(BranchCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_BranchCustomers(BranchCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_AccountCustomers(AccountCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_AccountCustomers(AccountCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Branches")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Branch_code;
		
		private string _branch_name;
		
		private string _branch_address;
		
		private EntitySet<BranchCustomer> _BranchCustomers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranch_codeChanging(string value);
    partial void OnBranch_codeChanged();
    partial void Onbranch_nameChanging(string value);
    partial void Onbranch_nameChanged();
    partial void Onbranch_addressChanging(string value);
    partial void Onbranch_addressChanged();
    #endregion
		
		public Branch()
		{
			this._BranchCustomers = new EntitySet<BranchCustomer>(new Action<BranchCustomer>(this.attach_BranchCustomers), new Action<BranchCustomer>(this.detach_BranchCustomers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branch_code", DbType="NChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Branch_code
		{
			get
			{
				return this._Branch_code;
			}
			set
			{
				if ((this._Branch_code != value))
				{
					this.OnBranch_codeChanging(value);
					this.SendPropertyChanging();
					this._Branch_code = value;
					this.SendPropertyChanged("Branch_code");
					this.OnBranch_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_branch_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string branch_name
		{
			get
			{
				return this._branch_name;
			}
			set
			{
				if ((this._branch_name != value))
				{
					this.Onbranch_nameChanging(value);
					this.SendPropertyChanging();
					this._branch_name = value;
					this.SendPropertyChanged("branch_name");
					this.Onbranch_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_branch_address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string branch_address
		{
			get
			{
				return this._branch_address;
			}
			set
			{
				if ((this._branch_address != value))
				{
					this.Onbranch_addressChanging(value);
					this.SendPropertyChanging();
					this._branch_address = value;
					this.SendPropertyChanged("branch_address");
					this.Onbranch_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_BranchCustomer", Storage="_BranchCustomers", ThisKey="Branch_code", OtherKey="Branches_Branch_code")]
		public EntitySet<BranchCustomer> BranchCustomers
		{
			get
			{
				return this._BranchCustomers;
			}
			set
			{
				this._BranchCustomers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BranchCustomers(BranchCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Branch = this;
		}
		
		private void detach_BranchCustomers(BranchCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Branch = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BranchCustomer")]
	public partial class BranchCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Branches_Branch_code;
		
		private int _Customers_Cust_Id;
		
		private EntityRef<Branch> _Branch;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranches_Branch_codeChanging(string value);
    partial void OnBranches_Branch_codeChanged();
    partial void OnCustomers_Cust_IdChanging(int value);
    partial void OnCustomers_Cust_IdChanged();
    #endregion
		
		public BranchCustomer()
		{
			this._Branch = default(EntityRef<Branch>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Branches_Branch_code", DbType="NChar(8) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Branches_Branch_code
		{
			get
			{
				return this._Branches_Branch_code;
			}
			set
			{
				if ((this._Branches_Branch_code != value))
				{
					if (this._Branch.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBranches_Branch_codeChanging(value);
					this.SendPropertyChanging();
					this._Branches_Branch_code = value;
					this.SendPropertyChanged("Branches_Branch_code");
					this.OnBranches_Branch_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customers_Cust_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Customers_Cust_Id
		{
			get
			{
				return this._Customers_Cust_Id;
			}
			set
			{
				if ((this._Customers_Cust_Id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomers_Cust_IdChanging(value);
					this.SendPropertyChanging();
					this._Customers_Cust_Id = value;
					this.SendPropertyChanged("Customers_Cust_Id");
					this.OnCustomers_Cust_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Branch_BranchCustomer", Storage="_Branch", ThisKey="Branches_Branch_code", OtherKey="Branch_code", IsForeignKey=true)]
		public Branch Branch
		{
			get
			{
				return this._Branch.Entity;
			}
			set
			{
				Branch previousValue = this._Branch.Entity;
				if (((previousValue != value) 
							|| (this._Branch.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Branch.Entity = null;
						previousValue.BranchCustomers.Remove(this);
					}
					this._Branch.Entity = value;
					if ((value != null))
					{
						value.BranchCustomers.Add(this);
						this._Branches_Branch_code = value.Branch_code;
					}
					else
					{
						this._Branches_Branch_code = default(string);
					}
					this.SendPropertyChanged("Branch");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_BranchCustomer", Storage="_Customer", ThisKey="Customers_Cust_Id", OtherKey="Cust_Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.BranchCustomers.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.BranchCustomers.Add(this);
						this._Customers_Cust_Id = value.Cust_Id;
					}
					else
					{
						this._Customers_Cust_Id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Accounts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Account_number;
		
		private int _cust_number;
		
		private decimal _Acct_balance;
		
		private string _Account_type_acctype_Id;
		
		private EntitySet<AccountCustomer> _AccountCustomers;
		
		private EntityRef<Account_type> _Account_type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_numberChanging(int value);
    partial void OnAccount_numberChanged();
    partial void Oncust_numberChanging(int value);
    partial void Oncust_numberChanged();
    partial void OnAcct_balanceChanging(decimal value);
    partial void OnAcct_balanceChanged();
    partial void OnAccount_type_acctype_IdChanging(string value);
    partial void OnAccount_type_acctype_IdChanged();
    #endregion
		
		public Accounts()
		{
			this._AccountCustomers = new EntitySet<AccountCustomer>(new Action<AccountCustomer>(this.attach_AccountCustomers), new Action<AccountCustomer>(this.detach_AccountCustomers));
			this._Account_type = default(EntityRef<Account_type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_number", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Account_number
		{
			get
			{
				return this._Account_number;
			}
			set
			{
				if ((this._Account_number != value))
				{
					this.OnAccount_numberChanging(value);
					this.SendPropertyChanging();
					this._Account_number = value;
					this.SendPropertyChanged("Account_number");
					this.OnAccount_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cust_number", DbType="Int NOT NULL")]
		public int cust_number
		{
			get
			{
				return this._cust_number;
			}
			set
			{
				if ((this._cust_number != value))
				{
					this.Oncust_numberChanging(value);
					this.SendPropertyChanging();
					this._cust_number = value;
					this.SendPropertyChanged("cust_number");
					this.Oncust_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Acct_balance", DbType="Decimal(18,0) NOT NULL")]
		public decimal Acct_balance
		{
			get
			{
				return this._Acct_balance;
			}
			set
			{
				if ((this._Acct_balance != value))
				{
					this.OnAcct_balanceChanging(value);
					this.SendPropertyChanging();
					this._Acct_balance = value;
					this.SendPropertyChanged("Acct_balance");
					this.OnAcct_balanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_type_acctype_Id", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Account_type_acctype_Id
		{
			get
			{
				return this._Account_type_acctype_Id;
			}
			set
			{
				if ((this._Account_type_acctype_Id != value))
				{
					if (this._Account_type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccount_type_acctype_IdChanging(value);
					this.SendPropertyChanging();
					this._Account_type_acctype_Id = value;
					this.SendPropertyChanged("Account_type_acctype_Id");
					this.OnAccount_type_acctype_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountCustomer", Storage="_AccountCustomers", ThisKey="Account_number", OtherKey="Accounts_Account_number")]
		public EntitySet<AccountCustomer> AccountCustomers
		{
			get
			{
				return this._AccountCustomers;
			}
			set
			{
				this._AccountCustomers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_type_Account", Storage="_Account_type", ThisKey="Account_type_acctype_Id", OtherKey="acctype_Id", IsForeignKey=true)]
		public Account_type Account_type
		{
			get
			{
				return this._Account_type.Entity;
			}
			set
			{
				Account_type previousValue = this._Account_type.Entity;
				if (((previousValue != value) 
							|| (this._Account_type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account_type.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Account_type.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._Account_type_acctype_Id = value.acctype_Id;
					}
					else
					{
						this._Account_type_acctype_Id = default(string);
					}
					this.SendPropertyChanged("Account_type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountCustomers(AccountCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Accounts = this;
		}
		
		private void detach_AccountCustomers(AccountCustomer entity)
		{
			this.SendPropertyChanging();
			entity.Accounts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account_type")]
	public partial class Account_type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _acctype_Id;
		
		private string _acctype;
		
		private decimal _InterestRate;
		
		private EntitySet<Accounts> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onacctype_IdChanging(string value);
    partial void Onacctype_IdChanged();
    partial void OnacctypeChanging(string value);
    partial void OnacctypeChanged();
    partial void OnInterestRateChanging(decimal value);
    partial void OnInterestRateChanged();
    #endregion
		
		public Account_type()
		{
			this._Accounts = new EntitySet<Accounts>(new Action<Accounts>(this.attach_Accounts), new Action<Accounts>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acctype_Id", DbType="NVarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string acctype_Id
		{
			get
			{
				return this._acctype_Id;
			}
			set
			{
				if ((this._acctype_Id != value))
				{
					this.Onacctype_IdChanging(value);
					this.SendPropertyChanging();
					this._acctype_Id = value;
					this.SendPropertyChanged("acctype_Id");
					this.Onacctype_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acctype", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string acctype
		{
			get
			{
				return this._acctype;
			}
			set
			{
				if ((this._acctype != value))
				{
					this.OnacctypeChanging(value);
					this.SendPropertyChanging();
					this._acctype = value;
					this.SendPropertyChanged("acctype");
					this.OnacctypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestRate", DbType="Decimal(18,0) NOT NULL")]
		public decimal InterestRate
		{
			get
			{
				return this._InterestRate;
			}
			set
			{
				if ((this._InterestRate != value))
				{
					this.OnInterestRateChanging(value);
					this.SendPropertyChanging();
					this._InterestRate = value;
					this.SendPropertyChanged("InterestRate");
					this.OnInterestRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_type_Account", Storage="_Accounts", ThisKey="acctype_Id", OtherKey="Account_type_acctype_Id")]
		public EntitySet<Accounts> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Accounts entity)
		{
			this.SendPropertyChanging();
			entity.Account_type = this;
		}
		
		private void detach_Accounts(Accounts entity)
		{
			this.SendPropertyChanging();
			entity.Account_type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountCustomer")]
	public partial class AccountCustomer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Accounts_Account_number;
		
		private int _Customers_Cust_Id;
		
		private EntityRef<Accounts> _Account;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccounts_Account_numberChanging(int value);
    partial void OnAccounts_Account_numberChanged();
    partial void OnCustomers_Cust_IdChanging(int value);
    partial void OnCustomers_Cust_IdChanged();
    #endregion
		
		public AccountCustomer()
		{
			this._Account = default(EntityRef<Accounts>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Accounts_Account_number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Accounts_Account_number
		{
			get
			{
				return this._Accounts_Account_number;
			}
			set
			{
				if ((this._Accounts_Account_number != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccounts_Account_numberChanging(value);
					this.SendPropertyChanging();
					this._Accounts_Account_number = value;
					this.SendPropertyChanged("Accounts_Account_number");
					this.OnAccounts_Account_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customers_Cust_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Customers_Cust_Id
		{
			get
			{
				return this._Customers_Cust_Id;
			}
			set
			{
				if ((this._Customers_Cust_Id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomers_Cust_IdChanging(value);
					this.SendPropertyChanging();
					this._Customers_Cust_Id = value;
					this.SendPropertyChanged("Customers_Cust_Id");
					this.OnCustomers_Cust_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountCustomer", Storage="_Account", ThisKey="Accounts_Account_number", OtherKey="Account_number", IsForeignKey=true)]
		public Accounts Accounts
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Accounts previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountCustomers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountCustomers.Add(this);
						this._Accounts_Account_number = value.Account_number;
					}
					else
					{
						this._Accounts_Account_number = default(int);
					}
					this.SendPropertyChanged("Accounts");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_AccountCustomer", Storage="_Customer", ThisKey="Customers_Cust_Id", OtherKey="Cust_Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.AccountCustomers.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.AccountCustomers.Add(this);
						this._Customers_Cust_Id = value.Cust_Id;
					}
					else
					{
						this._Customers_Cust_Id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bills")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Bill_Id;
		
		private string _Cust_name;
		
		private System.DateTime _Statement_date;
		
		private System.DateTime _Due_date;
		
		private decimal _Bill_Amt;
		
		private int _Customer_Cust_Id;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBill_IdChanging(int value);
    partial void OnBill_IdChanged();
    partial void OnCust_nameChanging(string value);
    partial void OnCust_nameChanged();
    partial void OnStatement_dateChanging(System.DateTime value);
    partial void OnStatement_dateChanged();
    partial void OnDue_dateChanging(System.DateTime value);
    partial void OnDue_dateChanged();
    partial void OnBill_AmtChanging(decimal value);
    partial void OnBill_AmtChanged();
    partial void OnCustomer_Cust_IdChanging(int value);
    partial void OnCustomer_Cust_IdChanged();
    #endregion
		
		public Bill()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Bill_Id
		{
			get
			{
				return this._Bill_Id;
			}
			set
			{
				if ((this._Bill_Id != value))
				{
					this.OnBill_IdChanging(value);
					this.SendPropertyChanging();
					this._Bill_Id = value;
					this.SendPropertyChanged("Bill_Id");
					this.OnBill_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cust_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Cust_name
		{
			get
			{
				return this._Cust_name;
			}
			set
			{
				if ((this._Cust_name != value))
				{
					this.OnCust_nameChanging(value);
					this.SendPropertyChanging();
					this._Cust_name = value;
					this.SendPropertyChanged("Cust_name");
					this.OnCust_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Statement_date", DbType="DateTime NOT NULL")]
		public System.DateTime Statement_date
		{
			get
			{
				return this._Statement_date;
			}
			set
			{
				if ((this._Statement_date != value))
				{
					this.OnStatement_dateChanging(value);
					this.SendPropertyChanging();
					this._Statement_date = value;
					this.SendPropertyChanged("Statement_date");
					this.OnStatement_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Due_date", DbType="DateTime NOT NULL")]
		public System.DateTime Due_date
		{
			get
			{
				return this._Due_date;
			}
			set
			{
				if ((this._Due_date != value))
				{
					this.OnDue_dateChanging(value);
					this.SendPropertyChanging();
					this._Due_date = value;
					this.SendPropertyChanged("Due_date");
					this.OnDue_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bill_Amt", DbType="Decimal(18,0) NOT NULL")]
		public decimal Bill_Amt
		{
			get
			{
				return this._Bill_Amt;
			}
			set
			{
				if ((this._Bill_Amt != value))
				{
					this.OnBill_AmtChanging(value);
					this.SendPropertyChanging();
					this._Bill_Amt = value;
					this.SendPropertyChanged("Bill_Amt");
					this.OnBill_AmtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Cust_Id", DbType="Int NOT NULL")]
		public int Customer_Cust_Id
		{
			get
			{
				return this._Customer_Cust_Id;
			}
			set
			{
				if ((this._Customer_Cust_Id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_Cust_IdChanging(value);
					this.SendPropertyChanging();
					this._Customer_Cust_Id = value;
					this.SendPropertyChanged("Customer_Cust_Id");
					this.OnCustomer_Cust_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Bill", Storage="_Customer", ThisKey="Customer_Cust_Id", OtherKey="Cust_Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._Customer_Cust_Id = value.Cust_Id;
					}
					else
					{
						this._Customer_Cust_Id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
